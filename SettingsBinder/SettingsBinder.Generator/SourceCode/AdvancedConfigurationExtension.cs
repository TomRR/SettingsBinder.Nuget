namespace TomRR.SourceGenerator.SettingsBinder.SourceCode;

public static class AdvancedConfigurationExtension
{
    public const string SourceCode = $@"//<auto-generated/>
#nullable enable
using Microsoft.Extensions.Configuration;
using System.IO;

namespace {Constance.NamespaceBase}.Advanced;

/// <summary>
/// Provides advanced, modular configuration extension methods for fine-grained setup control.
/// </summary>
public static class ConfigurationBuilderAdvancedExtensions
{{
    /// <summary>
    /// Adds the base path for configuration files, defaults to the current directory if not specified.
    /// </summary>
    public static IConfigurationBuilder WithBasePath(this IConfigurationBuilder builder, string? path = null)
    {{
        var basePath = string.IsNullOrWhiteSpace(path) ? Directory.GetCurrentDirectory() : path;
        return builder.SetBasePath(basePath);
    }}
    
    /// <summary>
    /// Adds a JSON configuration file to the configuration sources.
    /// </summary>
    public static IConfigurationBuilder WithJsonFile(this IConfigurationBuilder builder, string path = ""appsettings.json"", bool optional = false, bool reloadOnChange = true) 
        => builder.AddJsonFile(path, optional, reloadOnChange);
    
    /// <summary>
    /// Adds a development-specific JSON configuration file to the configuration sources.
    /// </summary>
    public static IConfigurationBuilder WithEnvironmentJsonFile(this IConfigurationBuilder builder, string environment = ""Development"", bool optional = true, bool reloadOnChange = true) 
        => builder.AddJsonFile($""appsettings.{{environment}}.json"", optional, reloadOnChange);
    
    /// <summary>
    /// Adds user secrets to the configuration sources for the specified type.
    /// </summary>
    /// <typeparam name=""T"">A type in the assembly containing the user secrets (typically <c>Program</c>).</typeparam>
    public static IConfigurationBuilder WithSecrets<T>(this IConfigurationBuilder builder) where T : class 
        => builder.AddUserSecrets<T>();
    
    /// <summary>
    /// Adds environment variables to the configuration sources.
    /// </summary>
    public static IConfigurationBuilder WithEnvironmentVariables(this IConfigurationBuilder builder) 
        => builder.AddEnvironmentVariables();
}}";
}